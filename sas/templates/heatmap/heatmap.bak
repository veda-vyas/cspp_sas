<!DOCTYPE html>
<meta charset="utf-8">
<html>
  <head>
    <style>
      rect.bordered {
        stroke: #E6E6E6;
        stroke-width:2px;
      }

      text.mono {
        font-size: 9pt;
        font-family: Consolas, courier;
        fill: #aaa;
      }

      text.axis-workweek {
        fill: #000;
      }

      text.axis-worktime {
        fill: #000;
      }
    </style>
    <script src="https://d3js.org/d3.v3.js"></script>
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css">
  </head>
  <body class="container">
    <div class="container">
      <div class="col-md-6">
        <h1>Heatmap Data</h1>
        <div id="dataset-picker"></div>
      </div>
      <div class="col-md-6">
        <br><br>
        <select id="datepick" class="form-control" onchange="javascript:location.href=this.value">
          <option value="03-10-2017">03-10-2017</option>
          <option value="04-10-2017">04-10-2017</option>
          <option value="05-10-2017">05-10-2017</option>
          <option value="06-10-2017">06-10-2017</option>
        </select>
      </div>
    </div>
    <hr>
    <div id="chart"></div>
    <hr>
    </div>
    <script type="text/javascript">
    document.getElementById("datepick").value = "{{heatmap_data[0]}}"
      var margin = { top: 50, right: 0, bottom: 100, left: 30 },
          // width = 960 - margin.left - margin.right,
          width = 1140 - margin.left - margin.right,
          height = 730 - margin.top - margin.bottom,
          gridSize = Math.floor(width / 32),
          legendElementWidth = gridSize*2,
          buckets = 9,
          colors = ["#ffffd9","#edf8b1","#c7e9b4","#7fcdbb","#41b6c4","#1d91c0","#225ea8","#253494","#081d58"], // alternatively colorbrewer.YlGnBu[9]
          days = [],
          times = ["9a", "20","40", "10a", "20","40", "11a", "20","40", "12p", "20","40", "1p", "20","40", "2p", "20","40", "3p", "20","40", "4p", "20","40", "5p", "20","40", "6p", "20","40", "*"];
          datasets = ["/send_heatmap_data/data{{heatmap_data[0]}}.tsv"];
      {% for day in heatmap_data[1]%}
        days.push("{{day}}".toString())
      {% endfor %}

      var svg = d3.select("#chart").append("svg")
          .attr("width", width + margin.left + margin.right)
          .attr("height", height + margin.top + margin.bottom)
          .append("g")
          .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

      var dayLabels = svg.selectAll(".dayLabel")
          .data(days)
          .enter().append("text")
            .text(function (d) { return d; })
            .attr("x", 0)
            .attr("y", function (d, i) { return i * gridSize; })
            .style("text-anchor", "end")
            .attr("transform", "translate(-6," + gridSize / 1.5 + ")")
            .attr("class", function (d, i) { return ((i >= 0 && i <= 4) ? "dayLabel mono axis axis-workweek" : "dayLabel mono axis"); });

      var timeLabels = svg.selectAll(".timeLabel")
          .data(times)
          .enter().append("text")
            .text(function(d) { return d; })
            .attr("x", function(d, i) { return i * gridSize; })
            .attr("y", 0)
            .style("text-anchor", "middle")
            .attr("transform", "translate(" + gridSize / 2 + ", -6)")
            .attr("class", function(d, i) { return ((i >= 7 && i <= 16) ? "timeLabel mono axis axis-worktime" : "timeLabel mono axis"); });

            var heatmapChart = function(tsvFile) {
              d3.tsv(tsvFile,
              function(d) {
                // console.log(d)
                // min = parseInt(d.split(":")[1])
                // hour = parseInt(d.split(":")[0])
                return {
                  day: +d.day,
                  hour: +parseInt(d.hour.split(":")[0]),
                  min: +parseInt(d.hour.split(":")[1])/20,
                  value: +d.value
                };
              },
              function(error, data) {
                console.log(data)
                var colorScale = d3.scale.quantile()
                    .domain([0, buckets - 1, d3.max(data, function (d) { return d.value; })])
                    .range(colors);

                var cards = svg.selectAll(".hour")
                    .data(data, function(d) {return d.day+':'+d.hour+':'+d.min;});

                cards.append("title");

                cards.enter().append("rect")
                    .attr("x", function(d) { console.log(d.hour+d.min); return (d.hour+d.min - 9) * gridSize; })
                    .attr("y", function(d) { return (d.day - 1) * gridSize; })
                    .attr("rx", 4)
                    .attr("ry", 4)
                    .attr("class", "hour bordered")
                    .attr("width", gridSize)
                    .attr("height", gridSize)
                    .style("fill", colors[0]);

                cards.transition().duration(1000)
                    .style("fill", function(d) { return colorScale(d.value); });

                cards.select("title").text(function(d) { return d.value; });

                cards.exit().remove();

                var legend = svg.selectAll(".legend")
                    .data([0].concat(colorScale.quantiles()), function(d) { return d; });

                legend.enter().append("g")
                    .attr("class", "legend");

                legend.append("rect")
                  .attr("x", function(d, i) { return legendElementWidth * i; })
                  .attr("y", height)
                  .attr("width", legendElementWidth)
                  .attr("height", gridSize / 2)
                  .style("fill", function(d, i) { return colors[i]; });

                legend.append("text")
                  .attr("class", "mono")
                  .text(function(d) { return "â‰¥ " + Math.round(d); })
                  .attr("x", function(d, i) { return legendElementWidth * i; })
                  .attr("y", height + gridSize);

                legend.exit().remove();

              });
            };

      heatmapChart(datasets[0]);

      var datasetpicker = d3.select("#dataset-picker").selectAll(".dataset-button")
        .data(datasets);

      datasetpicker.enter()
        .append("input")
        .attr("value", function(d){ return "Refresh"})
        .attr("type", "button")
        .attr("class", "dataset-button")
        .on("click", function(d) {
          heatmapChart(d);
        });
    </script>
  </body>
</html>
